import{_ as e,c as t,o,a4 as s}from"./chunks/framework.ClEHkwpW.js";const c="/blog/assets/Snipaste_2024-02-24_13-48-37.CkkeZgeQ.png",a="/blog/assets/Snipaste_2024-02-24_13-49-57.CqwRS_VV.png",i="/blog/assets/Snipaste_2024-02-24_14-47-30.jG1xA8GB.png",r="/blog/assets/Snipaste_2024-02-24_14-52-32.CQeb9mM6.png",d="/blog/assets/Snipaste_2024-02-24_15-04-55.BfVWGPYp.png",p="/blog/assets/Snipaste_2024-02-24_15-09-45.Cel-arir.png",k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"toolkit/git/代码回滚/index.md","filePath":"toolkit/git/代码回滚/index.md"}'),n={name:"toolkit/git/代码回滚/index.md"},m=s('<h2 id="未提交" tabindex="-1">未提交 <a class="header-anchor" href="#未提交" aria-label="Permalink to &quot;未提交&quot;">​</a></h2><p>如果只是改了工作区代码，没有执行<code>git add</code>添加到暂存区，那么执行 <code>git restore .</code> 即可撤销所有更改； 一般IDE也会有 <code>Rollback</code>或者<code>Discard Changes</code>之类的界面操作</p><p><img src="'+c+'" alt=""></p><p>如果已经执行了<code>git add</code>将代码添加到了暂存区，那么需要加上<code>--staged</code>参数，即<code>git restore --staged .</code>，当前工作区不受影响</p><p><img src="'+a+'" alt=""></p><h2 id="已生成commit" tabindex="-1">已生成commit <a class="header-anchor" href="#已生成commit" aria-label="Permalink to &quot;已生成commit&quot;">​</a></h2><p><code>git reset --hard</code>，会重置当前工作区和暂存区，使得保持和版本库中代码一致，所以未commit的代码会丢失</p><p><code>git reset --mixed</code>，<code>--mixed</code> 是默认参数可省略，它会重置暂存区保留工作区内容；其实和上面<code>git restore --staged .</code>效果是一样的</p><p><code>git reset --soft</code>，不怎么常用，有兴趣可以自行研究</p><h2 id="已push到远程" tabindex="-1">已push到远程 <a class="header-anchor" href="#已push到远程" aria-label="Permalink to &quot;已push到远程&quot;">​</a></h2><p>这时需要使用 <strong>revert</strong> 命令撤销指定的提交内容，然后会生成新的commit；</p><p>但是有两种情况，一种是常规commit，只有一个<strong>parent commit</strong>，分支图看起来是一条直线，使用<code>git show HEAD</code>查看</p><p><img src="'+i+'" alt=""></p><p>然后执行<code>git revert HEAD</code>，输入commit信息，可以看到 <strong>333</strong> 已被撤销</p><p><img src="'+r+'" alt=""></p><p>另一种是 <strong>merge commit</strong>，合并分支后，新的commit会有两个<strong>parent commit</strong>，使用<code>git show HEAD</code>查看</p><p><img src="'+d+'" alt=""></p><p>然后执行<code>git revert -m 1 HEAD</code>，输入提交信息，再次查看发现dev分支内容已被撤销</p><p><img src="'+p+'" alt=""></p><p>最后解释下上面的命令，<code>-m 1</code>意思是保留哪个分支，1就是master分支，2就是dev分支，1和2的顺序对应<code>git show HEAD</code>看到的顺序(上图红线处)</p>',20),_=[m];function g(l,h,u,b,f,x){return o(),t("div",null,_)}const A=e(n,[["render",g]]);export{k as __pageData,A as default};
